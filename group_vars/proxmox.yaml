---
ansible_host: "{{ vault_proxmox_host_ip }}"
interface_name: eno1
interfaces_template: "proxmox/interfaces.j2"
proxmox_pass: "{{ vault_proxmox_pass }}"
host_ip: "{{ ansible_host }}/24"
gateway_ip: "{{ vault_gateway_ip }}"
domain_name: "{{ vault_domain_name }}"
nas_ip: "{{ vault_nas_ip }}"
nfs_iso_export: "{{ vault_nfs_iso_export }}"
nfs_pvedata_export: "{{ vault_nfs_pvedata_export }}"
init_admin_pass: "{{ vault_init_admin_password }}"
photoprism_db_password: "{{ vault_photoprism_db_password }}"
nextcloud_db_password: "{{ vault_nextcloud_db_password }}"
nextcloud_root_db_password: "{{ vault_nextcloud_root_db_password }}"
cloudflare_account_email: "{{ vault_cf_email }}"
cloudflare_api_key: "{{ vault_cf_api_key }}"

# apprise
apprise_path: /usr/local/bin/apprise

# influxdb
influxdb_ip: 127.0.0.1

# grog.package
package_list:
- name: curl
- name: git
- name: hddtemp
- name: parted
- name: htop
- name: iftop
- name: iotop
- name: lm-sensors
- name: net-tools
- name: openssh-server
- name: python3
- name: tmux
- name: sudo
- name: wget
- name: tree
- name: smartmontools
- name: nmap
- name: intel-gpu-tools
- name: nfs-kernel-server
- name: zfsutils-linux
- name: ffmpeg

## telegraf
telegraf_plugins_base:
  - name: mem
  - name: system
  - name: cpu
    options:
      percpu: "true"
      totalcpu: "true"
      collect_cpu_time: "false"
      report_active: "false"
  - name: disk
    options:
      ignore_fs:
        - "tmpfs"
        - "devtmpfs"
        - "devfs"
      mountpoints:
        - "/"
  - name: diskio
    options:
      skip_serial_number: "true"
  - name: kernel
  - name: processes
  - name: docker
    options:
      endpoint: "unix:///var/run/docker.sock"
      perdevice: "true"
  - name: hddtemp
  - name: net
    options:
      interfaces:
        - "ens192"
        - "eno1"
  - name: sensors

zfs_path: /tank2
# ironicbadger.docker_compose_generator
appdata_path: "{{ zfs_path }}/appdata"
# download_path: /mnt/nvme2tb/downloads
media_path: "{{ zfs_path }}/media_"
storage_path: "{{ zfs_path }}/archives"
photoprism_dir: "{{ zfs_path }}/photoprism"
photoprism_important: "{{ zfs_path }}/media_photos/Important"
# photoprism_db_dir: "{{ zfs_path }}/photoprism/database"
photoprism_compose_output_path: /home/deployer/photoprism
local_domain: "{{ vault_domain_name }}"
backup_drive: "/mnt/backups/BACKUPS"

# backups
backup_disk_uuid: "a6fef221-763e-46d4-88c1-212136d94125"

# lm-traefik
traefik_file_provider: true
traefik_enable_dashboard: true #defaults to false
traefik_insecure_transport: false #defaults to false
traefik_exposed_by_default: false

containers:
  ###
  - service_name: traefik
    active: true
    image: traefik
    # container_name: tr
    ports:
      - 80:80
      - 443:443
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.rule=Host(`proxy.{{ local_domain }}`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.service=api@internal"
      - traefik.http.services.traefik.loadbalancer.server.port=8080
    # command:
    #   - --log.level=info
    #   - --accesslog=false
    #   - --api.insecure=false
    #   - --providers.docker=true
    #   - --providers.docker.exposedbydefault=false
    #   - --entrypoints.web.address=:80
    #   - --entrypoints.web.http.redirections.entryPoint.to=websecure
    #   - --entrypoints.web.http.redirections.entryPoint.scheme=https
    #   - --entrypoints.websecure.address=:443
    #   - --certificatesresolvers.cloudflare.acme.dnschallenge=true
    #   - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
    #   - "--certificatesresolvers.cloudflare.acme.email={{ cloudflare_account_email }}"
    #   - --certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json
    #   - --serversTransport.insecureSkipVerify=true
    volumes:
      - "{{ appdata_path }}/traefik:/etc/traefik"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - "CLOUDFLARE_EMAIL={{ cloudflare_account_email }}"
      - "CLOUDFLARE_API_KEY={{ cloudflare_api_key }}"
    restart: unless-stopped
    # networks:
    #   - proxy
  ###
  - service_name: influxdb
    active: true
    image: influxdb:1.8
    volumes:
      - "{{ appdata_path }}/influxdb:/config"
    ports:
      - 8086:8086
    restart: unless-stopped
  ###
  - service_name: librespeed
    active: true
    image: linuxserver/librespeed
    labels:
      - traefik.enable=true
      - "traefik.http.routers.librespeed.rule=Host(`speed.{{ local_domain }}`)"
    environment:
      - MODE=standalone
      - TELEMETRY=true
      # - "PASSWORD={{ librespeed_password }}"
    include_global_env_vars: true
    restart: unless-stopped
    # networks:
    #   - proxy
  ###
  - service_name: filebrowser
    active: true
    image: filebrowser/filebrowser:s6
    labels:
      - traefik.enable=true
      - "traefik.http.routers.fb.rule=Host(`files.{{ local_domain }}`)"
    volumes:
      - "{{ storage_path }}:/srv"
      - "{{ appdata_path }}/filebrowser/db:/database.db"
      - "{{ appdata_path }}/filebrowser/filebrowser.json:/.filebrowser.json"
    include_global_env_vars: true
    restart: unless-stopped
    # networks:
    #   - proxy
  ###
  - service_name: jellyfin
    active: true
    image: jellyfin/jellyfin
    # network_mode: host
    devices:
      - /dev/dri:/dev/dri
    labels:
      - traefik.enable=true
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.{{ local_domain }}`)"
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
    volumes:
      - "{{ appdata_path }}/jellyfin:/config"
      - "{{ media_path }}books:/data/books"
      - "{{ media_path }}movies:/data/movies"
      - "{{ media_path }}tvshows:/data/tvshows"
    environment:
      - "JELLYFIN_PublishedServerUrl=jellyfin.{{ local_domain }}"
    include_global_env_vars: true
    restart: unless-stopped
    # networks:
    #   - proxy
    ###
    # Terminal | docker-compose exec photoprism bash
    # Help     | docker-compose exec photoprism photoprism help
    # Config   | docker-compose exec photoprism photoprism config
    # Reset    | docker-compose exec photoprism photoprism reset
    # Backup   | docker-compose exec photoprism photoprism backup -a -i
    # Restore  | docker-compose exec photoprism photoprism restore -a -i
    # Index    | docker-compose exec photoprism photoprism index
    # Reindex  | docker-compose exec photoprism photoprism index -f
    # Import   | docker-compose exec photoprism photoprism import
    
    # To search originals for faces without a complete rescan:
    # docker-compose exec photoprism photoprism faces index
  - service_name: photoprism
    active: true
    image: photoprism/photoprism:latest
    depends_on:
      - photoprism_mariadb
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    restart: unless-stopped
    # ports:
      # - "2342:2342" # HTTP port
    labels:
      - traefik.enable=true
      - "traefik.http.routers.photoprism.rule=Host(`photos.{{ local_domain }}`)"
      - traefik.http.services.photoprism.loadbalancer.server.port=2342
    environment:
      - "PHOTOPRISM_ADMIN_PASSWORD={{ init_admin_pass }}"          # YOUR INITIAL ADMIN PASSWORD (MINIMUM 8 CHARACTERS, USERNAME "admin")
      # PHOTOPRISM_AUTH_MODE: "public"               # authentication mode (public, password)
      - "PHOTOPRISM_SITE_URL=https://photos.{{ local_domain }}/"  # public server URL incl http:// or https:// and /path, :port is optional
      - "PHOTOPRISM_ORIGINALS_LIMIT=5000"               # file size limit for originals in MB (increase for high-res video)
      - "PHOTOPRISM_HTTP_COMPRESSION=gzip"            # improves transfer speed and bandwidth utilization (none or gzip)
      - "PHOTOPRISM_LOG_LEVEL=debug"                   # log level: trace, debug, info, warning, error, fatal, or panic
      - "PHOTOPRISM_READONLY=false"                   # do not modify originals directory (reduced functionality)
      - "PHOTOPRISM_EXPERIMENTAL=false"               # enables experimental features
      - "PHOTOPRISM_DISABLE_CHOWN=false"              # disables storage permission updates on startup
      - "PHOTOPRISM_DISABLE_WEBDAV=false"             # disables built-in WebDAV server
      - "PHOTOPRISM_DISABLE_SETTINGS=false"           # disables settings UI and API
      - "PHOTOPRISM_DISABLE_TENSORFLOW=false"         # disables all features depending on TensorFlow
      - "PHOTOPRISM_DISABLE_FACES=false"              # disables facial recognition
      - "PHOTOPRISM_DISABLE_CLASSIFICATION=false"     # disables image classification
      - "PHOTOPRISM_DISABLE_RAW=false"                # disables indexing and conversion of RAW files
      - "PHOTOPRISM_RAW_PRESETS=false"                # enables applying user presets when converting RAW files (reduces performance)
      - "PHOTOPRISM_JPEG_QUALITY=100"                    # image quality, a higher value reduces compression (25-100)
      - "PHOTOPRISM_DETECT_NSFW=false"                # flag photos as private that MAY be offensive (requires TensorFlow)
      - "PHOTOPRISM_UPLOAD_NSFW=true"                 # allows uploads that MAY be offensive
      # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that doesn't require a server
      - "PHOTOPRISM_DATABASE_DRIVER=mysql"            # use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
      - "PHOTOPRISM_DATABASE_SERVER=photoprism_mariadb:3306"     # MariaDB or MySQL database server (hostname:port)
      - "PHOTOPRISM_DATABASE_NAME=photoprism"         # MariaDB or MySQL database schema name
      - "PHOTOPRISM_DATABASE_USER=photoprism"         # MariaDB or MySQL database user name
      - "PHOTOPRISM_DATABASE_PASSWORD={{ photoprism_db_password }}"       # MariaDB or MySQL database user password
      - "PHOTOPRISM_SITE_CAPTION=AI-Powered Photos App"
      - PHOTOPRISM_SITE_DESCRIPTION=""                # meta site description
      - PHOTOPRISM_SITE_AUTHOR=""                     # meta site author
      ## Run/install on first startup (options: update, gpu, tensorflow, davfs, clitools, clean):
      # PHOTOPRISM_INIT: "gpu tensorflow"
      ## Hardware Video Transcoding (for sponsors only due to high maintenance and support costs):
      - "PHOTOPRISM_FFMPEG_ENCODER=intel"        # FFmpeg encoder ("software", "intel", "nvidia", "apple", "raspberry")
      # PHOTOPRISM_FFMPEG_BITRATE: "32"              # FFmpeg encoding bitrate limit in Mbit/s (default: 50)
      ## Switch to a non-root user after initialization (supported IDs are 33, 50-99, 500-600, and 900-1200):
      - "PHOTOPRISM_UID={{ main_uid }}"
      - "PHOTOPRISM_GID={{ main_gid }}"
      - "PHOTOPRISM_AUTO_INDEX=60"
      - "PHOTOPRISM_AUTO_IMPORT=60"
      - "PHOTOPRISM_WORKERS=4"
  #     PHOTOPRISM_UMASK: 0000
    include_global_env_vars: true
    devices:
      - "/dev/dri:/dev/dri"
    working_dir: "/photoprism"                # do not change or remove
    volumes:
  #     # "/host/folder:/photoprism/folder"                # Example
  #     - "{{ appdata_path }}/photoprism/originals:/photoprism/originals"               # Original media files (DO NOT REMOVE)
  #     # - "/example/family:/photoprism/originals/family" # *Additional* media folders can be mounted like this
  #     # - "~/Import:/photoprism/import"                  # *Optional* base folder from which files can be imported to originals
      - "{{ photoprism_dir }}/storage:/photoprism/storage"
      - "{{ photoprism_dir }}/originals:/photoprism/originals"
      - "{{ photoprism_important }}:/photoprism/originals/Important:ro"
      - "{{ photoprism_dir }}/import:/photoprism/import"
  #   ###
  - service_name: photoprism_mariadb
    active: true
    ## If MariaDB gets stuck in a restart loop, this points to a memory or filesystem issue:
    ## https://docs.photoprism.app/getting-started/troubleshooting/#fatal-server-errors
    restart: unless-stopped
    image: mariadb:10.8
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    command: 
      - "mysqld"
      - "--innodb-buffer-pool-size=512M"
      - "--transaction-isolation=READ-COMMITTED"
      - "--character-set-server=utf8mb4"
      - "--collation-server=utf8mb4_unicode_ci"
      - "--max-connections=512"
      - "--innodb-rollback-on-timeout=OFF"
      - "--innodb-lock-wait-timeout=120"
    ## Never store database files on an unreliable device such as a USB flash drive, an SD card, or a shared network folder:
    volumes:
      - "{{ appdata_path }}/photoprism/database:/var/lib/mysql" # DO NOT REMOVE
    environment:
      - "MARIADB_AUTO_UPGRADE=1"
      - "MARIADB_INITDB_SKIP_TZINFO=1"
      - "MARIADB_DATABASE=photoprism"
      - "MARIADB_USER=photoprism"
      - "MARIADB_PASSWORD={{ photoprism_db_password }}"
      - "MARIADB_ROOT_PASSWORD={{ photoprism_db_password }}"
    include_global_env_vars: true

  - service_name: duplicati
    active: true
    restart: unless-stopped
    image: lscr.io/linuxserver/duplicati:latest
    labels:
      - traefik.enable=true
      - "traefik.http.routers.duplicati.rule=Host(`backups.{{ local_domain }}`)"
      - traefik.http.services.duplicati.loadbalancer.server.port=8200
    volumes:
      - "{{ photoprism_dir }}/originals:/source/photoprism/originals"
      - "{{ zfs_path }}:/source/tank2"
      - "{{ appdata_path }}/duplicati/config:/config"
      - "{{ backup_drive }}/duplicati:/local_backup"

  - service_name: portainer
    active: true
    restart: unless-stopped
    image: portainer/portainer-ce:latest
    labels:
      - traefik.enable=true
      - "traefik.http.routers.portainer.rule=Host(`portainer.{{ local_domain }}`)"
      - traefik.http.services.portainer.loadbalancer.server.port=9000
    volumes:
      - "{{ appdata_path }}/portainer/data:/data"
      - "/var/run/docker.sock:/var/run/docker.sock"
    include_global_env_vars: true

  - service_name: nextcloud
    active: true
    restart: unless-stopped
    image: nextcloud:stable
    depends_on:
      - nextcloud_mariadb
      # - nextcloud_redis
    labels:
      - traefik.enable=true
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.{{ local_domain }}`)"
      - traefik.http.services.nextcloud.loadbalancer.server.port=80
    volumes:
      - "{{ appdata_path }}/nextcloud/data:/var/www/html"
    # environment:
    #   - REDIS_HOST=redis
    include_global_env_vars: true

  - service_name: nextcloud_mariadb
    active: true
    restart: unless-stopped
    image: mariadb:10.5
    volumes:
      - "{{ appdata_path }}/nextcloud/db:/var/lib/mysql"
    environment:
      - MYSQL_AUTO_UPGRADE=1
      - MYSQL_DISABLE_UPGRADE_BACKUP=1
      - "MYSQL_DATABASE=nextcloud"
      - "MYSQL_USER=nextcloud"
      - "MYSQL_PASSWORD={{ nextcloud_db_password }}"
      - "MYSQL_ROOT_PASSWORD={{ nextcloud_root_db_password }}"
    include_global_env_vars: true

  - service_name: paperless_redis
    active: true
    restart: unless-stopped
    image: docker.io/library/redis:7

  - service_name: paperless
    active: true
    restart: unless-stopped
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    depends_on: 
      - paperless_redis
    labels:
      - traefik.enable=true
      - "traefik.http.routers.paperless.rule=Host(`paperless.{{ local_domain }}`)"
      - traefik.http.services.paperless.loadbalancer.server.port=8000
    # healthcheck:
    #   test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    volumes:
      - "{{ appdata_path }}/paperless/data:/usr/src/paperless/data"
      - "{{ appdata_path }}/paperless/media:/usr/src/paperless/media"
      - "{{ appdata_path }}/paperless/export:/usr/src/paperless/export"
      - "{{ appdata_path }}/paperless/consume:/usr/src/paperless/consume"
    environment:
      - "PAPERLESS_REDIS=redis://paperless_redis:6379"
      - "PAPERLESS_URL=https://paperless.{{ local_domain }}"
      - "PAPERLESS_TIME_ZONE={{ ntp_timezone }}"
      - "USERMAP_UID={{ main_uid }}"
      - "USERMAP_GID={{ main_gid }}"

  - service_name: mealie
    active: true
    image: hkotel/mealie
    labels:
      - traefik.enable=true
      - traefik.http.routers.mealie.rule=Host(`mealie.{{ local_domain }}`)
    environment:
      - DB_TYPE=sqlite
      - ALLOW_SIGNUP=false
      - "BASE_URL=https://mealie.{{ local_domain }}"
    volumes:
      - "{{ appdata_path }}/mealie/data:/app/data"
    restart: unless-stopped
    include_global_env_vars: true