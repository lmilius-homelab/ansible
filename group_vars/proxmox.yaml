---
ansible_host: "{{ vault_proxmox_host_ip }}"
interface_name: eno1
interfaces_template: "proxmox/interfaces.j2"
proxmox_pass: "{{ vault_proxmox_pass }}"
host_ip: "{{ ansible_host }}/24"
gateway_ip: "{{ vault_gateway_ip }}"
domain_name: "{{ vault_domain_name }}"
nas_ip: "{{ vault_nas_ip }}"
nfs_iso_export: "{{ vault_nfs_iso_export }}"
nfs_pvedata_export: "{{ vault_nfs_pvedata_export }}"
init_admin_pass: "{{ vault_init_admin_password }}"
photoprism_db_password: "{{ vault_photoprism_db_password }}"

# influxdb
influxdb_ip: 127.0.0.1

# grog.package
package_list:
- name: curl
- name: git
- name: hddtemp
- name: parted
- name: htop
- name: iftop
- name: iotop
- name: lm-sensors
- name: net-tools
- name: openssh-server
- name: python3
- name: tmux
- name: sudo
- name: wget
- name: tree
- name: smartmontools
- name: nmap
- name: intel-gpu-tools
- name: nfs-kernel-server
- name: zfsutils-linux
- name: ffmpeg

## telegraf
telegraf_plugins_base:
  - name: mem
  - name: system
  - name: cpu
    options:
      percpu: "true"
      totalcpu: "true"
      collect_cpu_time: "false"
      report_active: "false"
  - name: disk
    options:
      ignore_fs:
        - "tmpfs"
        - "devtmpfs"
        - "devfs"
      mountpoints:
        - "/"
  - name: diskio
    options:
      skip_serial_number: "true"
  - name: kernel
  - name: processes
  - name: docker
    options:
      endpoint: "unix:///var/run/docker.sock"
      perdevice: "true"
  - name: hddtemp
  - name: net
    options:
      interfaces:
        - "ens192"
        - "eno1"
  - name: sensors

# ironicbadger.docker_compose_generator
appdata_path: /mnt/pve/pvedata/appdata
# download_path: /mnt/nvme2tb/downloads
storage_path: /mnt/storage
local_domain: "{{ vault_domain_name }}"

containers:
  ###
  - service_name: influxdb
    active: true
    image: influxdb:1.8
    volumes:
      - "{{ appdata_path }}/influxdb:/config"
    ports:
      - 8086:8086
    restart: unless-stopped
  ###
  - service_name: librespeed
    active: true
    image: linuxserver/librespeed
    ports:
      - 8080:80
    # labels:
    #   - traefik.enable=true
    #   - "traefik.http.routers.librespeed.rule=Host(`speed.m.{{ local_domain }}`)"
    environment:
      - MODE=standalone
      - TELEMETRY=true
      # - "PASSWORD={{ librespeed_password }}"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: filebrowser
    active: true
    image: filebrowser/filebrowser:s6
    ports:
      - 8081:80
    # labels:
    #   - traefik.enable=true
    #   - "traefik.http.routers.fb.rule=Host(`files.m.{{ local_domain }}`)"
    volumes:
      - "{{ storage_path }}:/srv"
      - "{{ appdata_path }}/filebrowser/db:/database.db"
      - "{{ appdata_path }}/filebrowser/filebrowser.json:/.filebrowser.json"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: jellyfin
    active: true
    image: jellyfin/jellyfin
    network_mode: host
    devices:
      - /dev/dri:/dev/dri
    # labels:
    #   - traefik.enable=true
    #   - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.m.{{ local_domain }}`)"
    #   - traefik.http.services.jellyfin.loadbalancer.server.port=8096
    volumes:
      - "{{ appdata_path }}/jellyfin:/config"
      # - "{{ storage_path }}:/data"
      - "/mnt/media:/data"
    # environment:
      # - "JELLYFIN_PublishedServerUrl=emma-pc.{{ local_domain }}"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  # Terminal | docker-compose exec photoprism bash
  # Help     | docker-compose exec photoprism photoprism help
  # Config   | docker-compose exec photoprism photoprism config
  # Reset    | docker-compose exec photoprism photoprism reset
  # Backup   | docker-compose exec photoprism photoprism backup -a -i
  # Restore  | docker-compose exec photoprism photoprism restore -a -i
  # Index    | docker-compose exec photoprism photoprism index
  # Reindex  | docker-compose exec photoprism photoprism index -f
  # Import   | docker-compose exec photoprism photoprism import
  
  # To search originals for faces without a complete rescan:
  # docker-compose exec photoprism photoprism faces index
  - service_name: photoprism
    active: true
    image: photoprism/photoprism:latest
    depends_on:
      - photoprism_mariadb
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    ports:
      - "2342:2342" # HTTP port
    environment:
      PHOTOPRISM_ADMIN_PASSWORD: "{{ init_admin_pass }}"          # YOUR INITIAL ADMIN PASSWORD (MINIMUM 8 CHARACTERS, USERNAME "admin")
      PHOTOPRISM_SITE_URL: "http://localhost:2342/"  # public server URL incl http:// or https:// and /path, :port is optional
      # PHOTOPRISM_ORIGINALS_LIMIT: 5000               # file size limit for originals in MB (increase for high-res video)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip"            # improves transfer speed and bandwidth utilization (none or gzip)
      PHOTOPRISM_LOG_LEVEL: "info"                   # log level: trace, debug, info, warning, error, fatal, or panic
      PHOTOPRISM_PUBLIC: "false"                     # no authentication required (disables password protection)
      PHOTOPRISM_READONLY: "false"                   # do not modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "false"               # enables experimental features
      PHOTOPRISM_DISABLE_CHOWN: "false"              # disables storage permission updates on startup
      PHOTOPRISM_DISABLE_WEBDAV: "false"             # disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false"           # disables settings UI and API
      PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # disables all features depending on TensorFlow
      PHOTOPRISM_DISABLE_FACES: "false"              # disables facial recognition
      PHOTOPRISM_DISABLE_CLASSIFICATION: "false"     # disables image classification
      PHOTOPRISM_DISABLE_RAW: "false"                # disables indexing and conversion of RAW files
      PHOTOPRISM_RAW_PRESETS: "false"                # enables applying user presets when converting RAW files (reduces performance)
      PHOTOPRISM_JPEG_QUALITY: 100                    # image quality, a higher value reduces compression (25-100)
      PHOTOPRISM_DETECT_NSFW: "false"                # flag photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true"                 # allows uploads that MAY be offensive
      # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that doesn't require a server
      PHOTOPRISM_DATABASE_DRIVER: "mysql"            # use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
      PHOTOPRISM_DATABASE_SERVER: "photoprism_mariadb:3306"     # MariaDB or MySQL database server (hostname:port)
      PHOTOPRISM_DATABASE_NAME: "photoprism"         # MariaDB or MySQL database schema name
      PHOTOPRISM_DATABASE_USER: "photoprism"         # MariaDB or MySQL database user name
      PHOTOPRISM_DATABASE_PASSWORD: "{{ photoprism_db_password }}"       # MariaDB or MySQL database user password
      PHOTOPRISM_SITE_CAPTION: "AI-Powered Photos App"
      PHOTOPRISM_SITE_DESCRIPTION: ""                # meta site description
      PHOTOPRISM_SITE_AUTHOR: ""                     # meta site author
      ## Run/install on first startup (options: update, gpu, tensorflow, davfs, clitools, clean):
      # PHOTOPRISM_INIT: "gpu tensorflow"
      ## Hardware Video Transcoding (for sponsors only due to high maintenance and support costs):
      # PHOTOPRISM_FFMPEG_ENCODER: "software"        # FFmpeg encoder ("software", "intel", "nvidia", "apple", "raspberry")
      # PHOTOPRISM_FFMPEG_BITRATE: "32"              # FFmpeg encoding bitrate limit in Mbit/s (default: 50)
      ## Switch to a non-root user after initialization (supported IDs are 33, 50-99, 500-600, and 900-1200):
      PHOTOPRISM_UID: "{{ main_uid }}"
      PHOTOPRISM_GID: "{{ main_gid }}"
      PHOTOPRISM_UMASK: 0000
    devices:
      - "/dev/dri:/dev/dri"
    volumes:
      # "/host/folder:/photoprism/folder"                # Example
      - "{{ appdata_path }}/photoprism/originals:/photoprism/originals"               # Original media files (DO NOT REMOVE)
      # - "/example/family:/photoprism/originals/family" # *Additional* media folders can be mounted like this
      # - "~/Import:/photoprism/import"                  # *Optional* base folder from which files can be imported to originals
      - "{{ appdata_path }}/photoprism/storage:/photoprism/storage"
    ###
  - service_name: photoprism_mariadb
    ## If MariaDB gets stuck in a restart loop, this points to a memory or filesystem issue:
    ## https://docs.photoprism.app/getting-started/troubleshooting/#fatal-server-errors
    restart: unless-stopped
    image: mariadb:10.8
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    command: mysqld --innodb-buffer-pool-size=512M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    ## Never store database files on an unreliable device such as a USB flash drive, an SD card, or a shared network folder:
    volumes:
      - "{{ appdata_path }}/photoprism/database:/var/lib/mysql" # DO NOT REMOVE
    environment:
      MARIADB_AUTO_UPGRADE: "1"
      MARIADB_INITDB_SKIP_TZINFO: "1"
      MARIADB_DATABASE: "photoprism"
      MARIADB_USER: "photoprism"
      MARIADB_PASSWORD: "{{ photoprism_db_password }}"
      MARIADB_ROOT_PASSWORD: "{{ photoprism_db_password }}"
