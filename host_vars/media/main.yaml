---

ansible_host: "{{ vault_media_ip }}"

#########################################################
### Proxmox API connection and authentication section ###
#########################################################
pve_default_behavior: no_defaults
pve_node: pve1
pve_api_host: "{{ vault_pve1_host_ip }}"
pve_api_user: root@pam
pve_api_password: "{{ vault_proxmox_api_password }}"
# pve_api_token_id: root@pam!ansible
# pve_api_token_secret: "{{ vault_pve2_root_api_password }}"

#####################################
### Container OS template section ###
#####################################
pve_lxc_ostemplate_name: 'debian-12-standard_12.0-1_amd64.tar.zst'
pve_lxc_ostemplate_storage: iso_datastore
pve_lxc_ostemplate_content_type: vztmpl
pve_lxc_ostemplate_timeout: 60
pve_lxc_ostemplate_force: no
pve_lxc_ostemplate_state: present

##############################################
### Container resources definition section ###
##############################################
pve_lxc_timeout: 30
pve_hostname: "{{ inventory_hostname.split('.')[0] }}"
pve_lxc_vmid: 113
pve_lxc_description: |
  This host is a Debian 12 container configured via Ansible with:
  - Unlimited CPU cores
  - {{ pve_lxc_memory }} MB of RAM
  - {{ pve_lxc_disk }} GB of system disk
  - unprivileged: no
  - onboot: yes
pve_lxc_root_password: "{{ vault_dockerlxc_root_password }}"
pve_lxc_root_authorized_pubkey: "{{ lookup('file', '~/.ssh/id_ed25519.pub') }}"

# pve_lxc_cpu_cores: 2
pve_lxc_memory: 4096
pve_lxc_swap: 1024
pve_lxc_disk: 25
pve_lxc_storage: local_ssd
pve_onboot: yes
pve_lxc_searchdomain: "{{ vault_searchdomain }}"
pve_lxc_unprivileged: no
pve_lxc_force: no
pve_lxc_features:
  - nesting=1
  - mount=cifs;nfs
  - fuse=1
pve_lxc_net_interfaces:
  - id: net0
    name: eth0
    bridge: vmbr0
    hwaddr: FE:A8:38:9A:43:EE
    ip4: dhcp

# List of additional mount points and their characteristics
# pve_lxc_mounts:
#   - id: mp1
#     storage: vms
#     size: 50
#     mount_point: "{{ appdata_path }}"
#     acl: false                     # Optional.
#     quota: false                   # Optional.
#     backup: false                  # Optional.
#     skip_replication: false        # Optional.
#     read_only: false               # Optional.
  # - id: mp1
  #   storage: local-lvm
  #   size: 8
  #   mount_point: "/mnt/logs"

# Additional "manual" settings to add to the file /etc/pve/nodes/{{ node }}/lxc/{{ VMID }}.conf
pve_lxc_additional_configurations:
#     # Kernel modules available within the LXC
  - regexp: '^mp0'
    line: "mp0: {{ appdata_path }},mp={{ appdata_path }}"
    state: present
  - regexp: '^mp1'
    line: "mp1: {{ photoprism_dir }},mp={{ photoprism_dir }}"
    state: present
  - regexp: '^mp2'
    line: "mp2: {{ media_path }}photos,mp={{ media_path }}photos"
    state: present
  - regexp: '^mp3'
    line: "mp3: {{ media_path }}books,mp={{ media_path }}books"
    state: present
  - regexp: '^mp4'
    line: "mp4: {{ media_path }}movies,mp={{ media_path }}movies"
    state: present
  - regexp: '^mp5'
    line: "mp5: {{ media_path }}tvshows,mp={{ media_path }}tvshows"
    state: present
  - regexp: '^mp6'
    line: "mp6: {{ media_path }}videos,mp={{ media_path }}videos"
    state: present
  - regexp: '^lxc.mount.entry: /dev/dri'
    line: "lxc.mount.entry: /dev/dri dev/dri none bind,optional,create=dir 0,0"
    state: present
  - regexp: '^lxc.cgroup2.devices.allow: c 226:* rwm'
    line: "lxc.cgroup2.devices.allow: c 226:* rwm"
    state: present
  - regexp: '^lxc.cgroup2.devices.allow: c 120:* rwm'
    line: "lxc.cgroup2.devices.allow: c 120:* rwm"
    state: present


zfs_path: /tank2
# ironicbadger.docker_compose_generator
appdata_path: "{{ zfs_path }}/appdata"
media_path: "{{ zfs_path }}/media_"
storage_path: "{{ zfs_path }}/archives"
photoprism_dir: "{{ zfs_path }}/photoprism"
local_domain: "media.{{ vault_domain_name }}"

# traefik
traefik_config_filepath: "{{ appdata_path }}/media/traefik"

# containers:
#   ###
#   - service_name: traefik
#     active: true
#     image: traefik
#     ports:
#       - 80:80
#       - 443:443
#     labels:
#       - "traefik.enable=true"
#       - "traefik.http.routers.traefik.entrypoints=websecure"
#       - "traefik.http.routers.traefik.rule=Host(`proxy.{{ local_domain }}`)"
#       - "traefik.http.routers.traefik.tls=true"
#       - "traefik.http.routers.traefik.service=api@internal"
#       - traefik.http.services.traefik.loadbalancer.server.port=8080
#     volumes:
#       - "{{ nvr_path }}/traefik:/etc/traefik"
#       - "/var/run/docker.sock:/var/run/docker.sock:ro"
#     environment:
#       - "CLOUDFLARE_EMAIL={{ cloudflare_account_email }}"
#       - "CLOUDFLARE_API_KEY={{ cloudflare_api_key }}"
#     restart: unless-stopped
#   ###
#   - service_name: librespeed
#     active: true
#     image: linuxserver/librespeed
#     labels:
#       - traefik.enable=true
#       - "traefik.http.routers.librespeed.rule=Host(`speed.{{ local_domain }}`)"
#     environment:
#       - MODE=standalone
#       - TELEMETRY=true
#     include_global_env_vars: true
#     restart: unless-stopped
  ###
  # - service_name: frigate
  #   active: true
  #   privileged: true
  #   image: ghcr.io/blakeblackshear/frigate:stable
  #   shm_size: 256m
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.frigate.entrypoints=websecure"
  #     - "traefik.http.routers.frigate.rule=Host(`frigate.{{ local_domain }}`)"
  #     - "traefik.http.services.frigate.loadbalancer.server.port=5000"
  #   devices:
  #     - /dev/dri/renderD128
  #     - /dev/apex_0:/dev/apex_0
  #     - /dev/apex_1:/dev/apex_1
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - "{{ frigate_config_filepath }}/frigate.yml:/config/config.yml"
  #     - "{{ frigate_config_filepath }}/media:/media/frigate"
  #     - "{{ frigate_config_filepath }}/database:/config/db"
  #     # - "/dev/dri:/dev/dri"
  #     - type: tmpfs # Option: 2GB of memory, reduces SSD wear
  #       target: /tmp/cache
  #       tmpfs:
  #         size: 2000000000
  #   ports:
  #     - "1935:1935"
  #     - "5000:5000"
  #     - "8554:8554" # RTSP feeds
  #     - "8555:8555/tcp" # WebRTC over tcp
  #     - "8555:8555/udp" # WebRTC over udp
  #   environment:
  #     - "FRIGATE_RTSP_PASSWORD={{ frigate_rtsp_password }}"
  #   include_global_env_vars: true
  #   restart: unless-stopped
  ###
    
    
