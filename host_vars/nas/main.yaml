---

ansible_user: deployer
become: true
main_uid: "1100"
main_gid: "1100"

init_admin_pass: "{{ vault_init_admin_password }}"
photoprism_db_password: "{{ vault_photoprism_db_password }}"
nextcloud_db_password: "{{ vault_nextcloud_db_password }}"
nextcloud_root_db_password: "{{ vault_nextcloud_root_db_password }}"
cloudflare_account_email: "{{ vault_cf_email }}"
cloudflare_api_key: "{{ vault_cf_api_key }}"
wordpress_shop_db_password: "{{ vault_wordpress_shop_db_password }}"
wordpress_shop_root_db_password: "{{ vault_wordpress_shop_root_db_password }}"
peertube_db_password: "{{ vault_peertube_db_password }}"
peertube_secret: "{{ vault_peertube_secret }}"
admin_email: "{{ vault_admin_email }}"
peertube_admin_password: "{{ vault_peertube_admin_password }}"
joplin_postgres_password: "{{ vault_joplin_postgres_password }}"

# lm-traefik
traefik_file_provider: true
traefik_enable_dashboard: true #defaults to false
traefik_insecure_transport: false #defaults to false
traefik_exposed_by_default: false
traefik_config_filepath: "{{ appdata_path }}/traefik"
crowdsec_lapi_key: "{{ vault_crowdsec_lapi_key }}"

# frigate
frigate_filepath: "{{ nvr_path }}/frigate"
frigate_config_filepath: "{{ frigate_filepath }}/config"
frigate_rtsp_password: "{{ vault_frigate_rtsp_password }}"
frigate_host_ip: "{{ vault_nas_host_ip }}"
frigate_mqtt_host: "{{ vault_frigate_mqtt_host }}"
frigate_mqtt_user: "{{ vault_frigate_mqtt_user }}"
frigate_mqtt_password: "{{ vault_frigate_mqtt_password }}"
rtsp_camera_username: "{{ vault_rtsp_camera_username }}"
rtsp_camera_password: "{{ vault_rtsp_camera_password }}"
camera_subnet_prefix: "{{ vault_camera_subnet_prefix }}"

zfs_path: /tank2
nvr_path: "{{ zfs_path }}/nvr"

domain_name: "{{ vault_domain_name }}"
local_domain: "{{ domain_name }}"

# ironicbadger.docker_compose_generator
appdata_path: "{{ zfs_path }}/appdata"
ntp_timezone: "America/Chicago"
global_env_vars:
  - "PUID={{ main_uid }}"
  - "PGID={{ main_gid }}"
  - "TZ={{ ntp_timezone }}"
docker_compose_generator_uid: "{{ main_uid }}"
docker_compose_generator_gid: "{{ main_gid }}"
docker_compose_generator_output_path: /home/deployer/services

media_path: "{{ zfs_path }}/media_"
storage_path: "{{ zfs_path }}/archives"
photoprism_dir: "{{ zfs_path }}/photoprism"
photoprism_important: "{{ zfs_path }}/media_photos/Important"
photoprism_compose_output_path: /home/deployer/photoprism
backup_drive: "/mnt/backups/BACKUPS"

# immich
immich_release_version: "v1.122.1"
immich_dir: "{{ zfs_path }}/immich"
immich_db_password: "{{ vault_immich_db_password }}"

# nextcloud_db_password: "{{ vault_nextcloud_db_password }}"
# nextcloud_root_db_password: "{{ vault_nextcloud_root_db_password }}"
# # wordpress_shop_db_password: "{{ vault_wordpress_shop_db_password }}"
# # wordpress_shop_root_db_password: "{{ vault_wordpress_shop_root_db_password }}"
# peertube_db_password: "{{ vault_peertube_db_password }}"
# peertube_secret: "{{ vault_peertube_secret }}"
# peertube_admin_password: "{{ vault_peertube_admin_password }}"
# joplin_postgres_password: "{{ vault_joplin_postgres_password }}"


containers:
  ###
  - service_name: traefik
    active: true
    image: traefik:v3.2.1
    ports:
      - 80:80
      - 443:443
    expose:
      - 8082 # Prometheus metrics endpoint
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.rule=Host(`proxy.{{ local_domain }}`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.service=api@internal"
      - traefik.http.services.traefik.loadbalancer.server.port=8080
    volumes:
      - "{{ traefik_config_filepath }}:/etc/traefik"
      - "{{ traefik_config_filepath }}/logs:/logs"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - "CLOUDFLARE_EMAIL={{ cloudflare_account_email }}"
      - "CLOUDFLARE_API_KEY={{ cloudflare_api_key }}"
    restart: unless-stopped
    include_global_env_vars: true
  ###
  - service_name: crowdsec
    active: true
    restart: unless-stopped
    image: crowdsecurity/crowdsec:v1.6.4
    ports:
      - 127.0.0.1:9876:8080 # port mapping for local firewall bouncers
    expose:
      - 8080 # http api for bouncers
      - 6060 # metrics endpoint for prometheus
      - 7422 # appsec waf endpoint
    volumes:
      - "{{ appdata_path }}/crowdsec/data:/var/lib/crowdsec/data"
      - "{{ appdata_path }}/crowdsec/etc:/etc/crowdsec"
      - "/var/log/auth.log:/var/log/auth.log:ro"
      - "/var/log/syslog:/var/log/syslog:ro"
      - "{{ traefik_config_filepath }}/logs:/var/log/traefik:ro"
    include_global_env_vars: true
    environment:
      - "GID={{ main_gid }}"
      - COLLECTIONS=crowdsecurity/traefik crowdsecurity/http-cve crowdsecurity/appsec-generic-rules crowdsecurity/appsec-virtual-patching crowdsecurity/sshd crowdsecurity/linux crowdsecurity/base-http-scenarios
  ###
  - service_name: frigate
    active: true
    privileged: true
    image: ghcr.io/blakeblackshear/frigate:stable
    shm_size: 256m
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frigate.entrypoints=websecure"
      - "traefik.http.routers.frigate.rule=Host(`frigate.{{ local_domain }}`)"
      - "traefik.http.services.frigate.loadbalancer.server.port=5000"
    devices:
      - /dev/dri/renderD128
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - "{{ frigate_config_filepath }}:/config"
      - "{{ frigate_filepath }}/media:/media/frigate"
      - type: tmpfs # Option: 2GB of memory, reduces SSD wear
        target: /tmp/cache
        tmpfs:
          size: 2000000000
    ports:
      - "1935:1935"
      - "1984:1984" # go2rtc http api
      - "5000:5000"
      - "8554:8554" # RTSP feeds
      - "8555:8555/tcp" # WebRTC over tcp
      - "8555:8555/udp" # WebRTC over udp
    environment:
      - "FRIGATE_RTSP_PASSWORD={{ frigate_rtsp_password }}"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: influxdb
    active: true
    image: influxdb:1.8
    volumes:
      - "{{ appdata_path }}/influxdb:/config"
    ports:
      - 8086:8086
    restart: unless-stopped
  ###
  - service_name: librespeed
    active: true
    image: linuxserver/librespeed:5.4.1
    labels:
      - traefik.enable=true
      - "traefik.http.routers.librespeed.rule=Host(`speed.{{ local_domain }}`)"
    environment:
      - MODE=standalone
      - TELEMETRY=true
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: filebrowser
    active: true
    image: filebrowser/filebrowser:v2.31.2-s6
    labels:
      - traefik.enable=true
      - "traefik.http.routers.fb.rule=Host(`files.{{ local_domain }}`)"
    volumes:
      - "{{ storage_path }}:/srv"
      - "{{ appdata_path }}/filebrowser/database:/database"
      - "{{ appdata_path }}/filebrowser/config:/config"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: jellyfin
    active: true
    image: jellyfin/jellyfin:2024100705
    devices:
      - /dev/dri:/dev/dri
    labels:
      - traefik.enable=true
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.{{ local_domain }}`)"
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
    volumes:
      - "{{ appdata_path }}/jellyfin:/config"
      - "{{ media_path }}books:/data/books"
      - "{{ media_path }}movies:/data/movies"
      - "{{ media_path }}tvshows:/data/tvshows"
      - "{{ media_path }}videos:/data/videos"
    environment:
      - "JELLYFIN_PublishedServerUrl=jellyfin.{{ local_domain }}"
    include_global_env_vars: true
    restart: unless-stopped
    
    ###
    # Terminal | docker-compose exec photoprism bash
    # Help     | docker-compose exec photoprism photoprism help
    # Config   | docker-compose exec photoprism photoprism config
    # Reset    | docker-compose exec photoprism photoprism reset
    # Backup   | docker-compose exec photoprism photoprism backup -a -i
    # Restore  | docker-compose exec photoprism photoprism restore -a -i
    # Index    | docker-compose exec photoprism photoprism index
    # Reindex  | docker-compose exec photoprism photoprism index -f
    # Import   | docker-compose exec photoprism photoprism import
    
    # To search originals for faces without a complete rescan:
    # docker-compose exec photoprism photoprism faces index
  - service_name: photoprism
    active: true
    image: photoprism/photoprism:240915
    depends_on:
      - photoprism_mariadb
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - "traefik.http.routers.photoprism.rule=Host(`photos.{{ local_domain }}`)"
      - traefik.http.services.photoprism.loadbalancer.server.port=2342
    environment:
      - "PHOTOPRISM_ADMIN_PASSWORD={{ init_admin_pass }}"          # YOUR INITIAL ADMIN PASSWORD (MINIMUM 8 CHARACTERS, USERNAME "admin")
      # PHOTOPRISM_AUTH_MODE: "public"               # authentication mode (public, password)
      - "PHOTOPRISM_SITE_URL=https://photos.{{ local_domain }}/"  # public server URL incl http:// or https:// and /path, :port is optional
      - "PHOTOPRISM_ORIGINALS_LIMIT=5000"               # file size limit for originals in MB (increase for high-res video)
      - "PHOTOPRISM_HTTP_COMPRESSION=gzip"            # improves transfer speed and bandwidth utilization (none or gzip)
      - "PHOTOPRISM_LOG_LEVEL=debug"                   # log level: trace, debug, info, warning, error, fatal, or panic
      - "PHOTOPRISM_READONLY=false"                   # do not modify originals directory (reduced functionality)
      - "PHOTOPRISM_EXPERIMENTAL=false"               # enables experimental features
      - "PHOTOPRISM_DISABLE_CHOWN=false"              # disables storage permission updates on startup
      - "PHOTOPRISM_DISABLE_WEBDAV=false"             # disables built-in WebDAV server
      - "PHOTOPRISM_DISABLE_SETTINGS=false"           # disables settings UI and API
      - "PHOTOPRISM_DISABLE_TENSORFLOW=false"         # disables all features depending on TensorFlow
      - "PHOTOPRISM_DISABLE_FACES=false"              # disables facial recognition
      - "PHOTOPRISM_DISABLE_CLASSIFICATION=false"     # disables image classification
      - "PHOTOPRISM_DISABLE_RAW=false"                # disables indexing and conversion of RAW files
      - "PHOTOPRISM_RAW_PRESETS=false"                # enables applying user presets when converting RAW files (reduces performance)
      - "PHOTOPRISM_JPEG_QUALITY=100"                    # image quality, a higher value reduces compression (25-100)
      - "PHOTOPRISM_DETECT_NSFW=false"                # flag photos as private that MAY be offensive (requires TensorFlow)
      - "PHOTOPRISM_UPLOAD_NSFW=true"                 # allows uploads that MAY be offensive
      # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that doesn't require a server
      - "PHOTOPRISM_DATABASE_DRIVER=mysql"            # use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
      - "PHOTOPRISM_DATABASE_SERVER=photoprism_mariadb:3306"     # MariaDB or MySQL database server (hostname:port)
      - "PHOTOPRISM_DATABASE_NAME=photoprism"         # MariaDB or MySQL database schema name
      - "PHOTOPRISM_DATABASE_USER=photoprism"         # MariaDB or MySQL database user name
      - "PHOTOPRISM_DATABASE_PASSWORD={{ photoprism_db_password }}"       # MariaDB or MySQL database user password
      - "PHOTOPRISM_SITE_CAPTION=AI-Powered Photos App"
      - PHOTOPRISM_SITE_DESCRIPTION=""                # meta site description
      - PHOTOPRISM_SITE_AUTHOR=""                     # meta site author
      ## Run/install on first startup (options: update, gpu, tensorflow, davfs, clitools, clean):
      # PHOTOPRISM_INIT: "gpu tensorflow"
      ## Hardware Video Transcoding (for sponsors only due to high maintenance and support costs):
      - "PHOTOPRISM_FFMPEG_ENCODER=intel"        # FFmpeg encoder ("software", "intel", "nvidia", "apple", "raspberry")
      # PHOTOPRISM_FFMPEG_BITRATE: "32"              # FFmpeg encoding bitrate limit in Mbit/s (default: 50)
      ## Switch to a non-root user after initialization (supported IDs are 33, 50-99, 500-600, and 900-1200):
      - "PHOTOPRISM_UID={{ main_uid }}"
      - "PHOTOPRISM_GID={{ main_gid }}"
      - "PHOTOPRISM_AUTO_INDEX=60"
      - "PHOTOPRISM_AUTO_IMPORT=60"
      - "PHOTOPRISM_WORKERS=4"
  #     PHOTOPRISM_UMASK: 0000
    include_global_env_vars: true
    devices:
      - "/dev/dri:/dev/dri"
    working_dir: "/photoprism"                # do not change or remove
    volumes:
  #     # "/host/folder:/photoprism/folder"                # Example
  #     - "{{ appdata_path }}/photoprism/originals:/photoprism/originals"               # Original media files (DO NOT REMOVE)
  #     # - "/example/family:/photoprism/originals/family" # *Additional* media folders can be mounted like this
  #     # - "~/Import:/photoprism/import"                  # *Optional* base folder from which files can be imported to originals
      - "{{ photoprism_dir }}/storage:/photoprism/storage"
      - "{{ photoprism_dir }}/originals:/photoprism/originals"
      - "{{ photoprism_important }}:/photoprism/originals/Important:ro"
      - "{{ photoprism_dir }}/import:/photoprism/import"
  ###

  - service_name: photoprism_mariadb
    active: true
    ## If MariaDB gets stuck in a restart loop, this points to a memory or filesystem issue:
    ## https://docs.photoprism.app/getting-started/troubleshooting/#fatal-server-errors
    restart: unless-stopped
    image: mariadb:10.8
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    command: 
      - "mysqld"
      - "--innodb-buffer-pool-size=512M"
      - "--transaction-isolation=READ-COMMITTED"
      - "--character-set-server=utf8mb4"
      - "--collation-server=utf8mb4_unicode_ci"
      - "--max-connections=512"
      - "--innodb-rollback-on-timeout=OFF"
      - "--innodb-lock-wait-timeout=120"
    ## Never store database files on an unreliable device such as a USB flash drive, an SD card, or a shared network folder:
    volumes:
      - "{{ appdata_path }}/photoprism/database:/var/lib/mysql" # DO NOT REMOVE
    environment:
      - "MARIADB_AUTO_UPGRADE=1"
      - "MARIADB_INITDB_SKIP_TZINFO=1"
      - "MARIADB_DATABASE=photoprism"
      - "MARIADB_USER=photoprism"
      - "MARIADB_PASSWORD={{ photoprism_db_password }}"
      - "MARIADB_ROOT_PASSWORD={{ photoprism_db_password }}"
    include_global_env_vars: true
  ###
  - service_name: immich
    active: true
    restart: unless-stopped
    image: "ghcr.io/immich-app/immich-server:{{ immich_release_version }}"
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - "{{ immich_dir }}/library:/usr/src/app/upload"
      - /etc/localtime:/etc/localtime:ro
    labels:
      - traefik.enable=true
      - "traefik.http.routers.immich.rule=Host(`immich.{{ local_domain }}`)"
      - traefik.http.services.immich.loadbalancer.server.port=2283
    expose:
      - 2283
    depends_on:
      - immich_redis
      - immich_database
    include_global_env_vars: true
    environment:
      - "DB_DATABASE_NAME=immich"
      - "DB_USERNAME=postgres"
      - "DB_PASSWORD={{ immich_db_password }}"
      - REDIS_HOSTNAME=immich_redis
      - DB_HOSTNAME=immich_database
  
  ###
  - service_name: immich_ml
    active: true
    restart: unless-stopped
    hostname: immich-machine-learning
    image: "ghcr.io/immich-app/immich-machine-learning:{{ immich_release_version }}"
    # device_cgroup_rules:
    #   - 'c 189:* rmw'
    # devices:
    #   - /dev/dri:/dev/dri
    volumes:
      - "{{ immich_dir }}/model-cache:/cache"
      # - /dev/bus/usb:/dev/bus/usb
    
  ###
  - service_name: immich_redis
    active: true
    restart: unless-stopped
    image: "docker.io/redis:6.2-alpine@sha256:eaba718fecd1196d88533de7ba49bf903ad33664a92debb24660a922ecd9cac8"
    healthcheck:
      test: redis-cli ping || exit 1
    
  ###
  - service_name: immich_database
    active: true
    restart: unless-stopped
    image: "docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0"
    environment:
      - "POSTGRES_PASSWORD={{ immich_db_password }}"
      - POSTGRES_USER=postgres
      - POSTGRES_DB=immich
      - "POSTGRES_INITDB_ARGS='--data-checksums'"
    volumes:
      - "{{ immich_dir }}/database:/var/lib/postgresql/data"
    healthcheck:
      test: pg_isready --dbname='immich' --username='postgres' || exit 1; Chksum="$$(psql --dbname='immich' --username='postgres' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command:
      - 'postgres'
      - '-c'
      - 'shared_preload_libraries=vectors.so'
      - '-c'
      - 'search_path="$$user", public, vectors'
      - '-c'
      - 'logging_collector=on'
      - '-c'
      - 'max_wal_size=2GB'
      - '-c'
      - 'shared_buffers=512MB'
      - '-c'
      - 'wal_compression=on'

  ###
  - service_name: duplicati
    active: true
    restart: unless-stopped
    image: lscr.io/linuxserver/duplicati:2.0.8
    labels:
      - traefik.enable=true
      - "traefik.http.routers.duplicati.rule=Host(`backups.{{ local_domain }}`)"
      - traefik.http.services.duplicati.loadbalancer.server.port=8200
    volumes:
      - "{{ photoprism_dir }}/originals:/source/photoprism/originals"
      - "{{ zfs_path }}:/source/tank2"
      - "{{ appdata_path }}/duplicati/config:/config"
      - "{{ backup_drive }}/duplicati:/local_backup"

  - service_name: portainer
    active: true
    restart: unless-stopped
    image: portainer/portainer-ce:2.22.0
    labels:
      - traefik.enable=true
      - "traefik.http.routers.portainer.rule=Host(`portainer.{{ local_domain }}`)"
      - traefik.http.services.portainer.loadbalancer.server.port=9000
    volumes:
      - "{{ appdata_path }}/portainer/data:/data"
      - "/var/run/docker.sock:/var/run/docker.sock"
    include_global_env_vars: true

  - service_name: nextcloud
    active: true
    restart: unless-stopped
    image: nextcloud:29.0.7
    depends_on:
      - nextcloud_mariadb
      - nextcloud_redis
    labels:
      - traefik.enable=true
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.{{ local_domain }}`)"
      - traefik.http.services.nextcloud.loadbalancer.server.port=80
    volumes:
      - "{{ appdata_path }}/nextcloud/data:/var/www/html"
      - "{{ storage_path }}:/storage"
    environment:
      - REDIS_HOST=nextcloud_redis
    include_global_env_vars: true

  - service_name: nextcloud_redis
    active: true
    restart: unless-stopped
    image: redis:alpine

  - service_name: nextcloud_mariadb
    active: true
    restart: unless-stopped
    image: mariadb:10.5
    volumes:
      - "{{ appdata_path }}/nextcloud/db:/var/lib/mysql"
    environment:
      - MYSQL_AUTO_UPGRADE=1
      # - MYSQL_DISABLE_UPGRADE_BACKUP=1
      - "MYSQL_DATABASE=nextcloud"
      - "MYSQL_USER=nextcloud"
      - "MYSQL_PASSWORD={{ nextcloud_db_password }}"
      - "MYSQL_ROOT_PASSWORD={{ nextcloud_root_db_password }}"
    include_global_env_vars: true

  - service_name: paperless_redis
    active: true
    restart: unless-stopped
    image: docker.io/library/redis:7

  - service_name: paperless
    active: true
    restart: unless-stopped
    image: ghcr.io/paperless-ngx/paperless-ngx:2.12.1
    depends_on: 
      - paperless_redis
    labels:
      - traefik.enable=true
      - "traefik.http.routers.paperless.rule=Host(`paperless.{{ local_domain }}`)"
      - traefik.http.services.paperless.loadbalancer.server.port=8000
    # healthcheck:
    #   test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    volumes:
      - "{{ appdata_path }}/paperless/data:/usr/src/paperless/data"
      - "{{ appdata_path }}/paperless/media:/usr/src/paperless/media"
      - "{{ appdata_path }}/paperless/export:/usr/src/paperless/export"
      - "{{ appdata_path }}/paperless/consume:/usr/src/paperless/consume"
    environment:
      - "PAPERLESS_REDIS=redis://paperless_redis:6379"
      - "PAPERLESS_URL=https://paperless.{{ local_domain }}"
      - "PAPERLESS_TIME_ZONE={{ ntp_timezone }}"
      - "USERMAP_UID={{ main_uid }}"
      - "USERMAP_GID={{ main_gid }}"

  - service_name: mealie
    active: true
    image: hkotel/mealie:v1.12.0
    labels:
      - traefik.enable=true
      - traefik.http.routers.mealie.rule=Host(`mealie.{{ local_domain }}`)
    environment:
      - DB_TYPE=sqlite
      - ALLOW_SIGNUP=false
      - "BASE_URL=https://mealie.{{ local_domain }}"
    volumes:
      - "{{ appdata_path }}/mealie/data:/app/data"
    restart: unless-stopped
    include_global_env_vars: true

  # - service_name: wordpress-shop
  #   active: true
  #   image: wordpress
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.wordpress-shop.rule=Host(`shop.{{ local_domain }}`)
  #   environment:
  #     - WORDPRESS_DB_HOST=shopdb
  #     - WORDPRESS_DB_USER=shopdb
  #     - "WORDPRESS_DB_PASSWORD={{ wordpress_shop_db_password }}"
  #     - WORDPRESS_DB_NAME=shopdb
  #   volumes:
  #     - "{{ appdata_path }}/wordpress-shop/data:/var/www/html"
  #   restart: unless-stopped
  #   depends_on:
  #     - shopdb

  # - service_name: shopdb
  #   active: true
  #   image: mysql:5.7
  #   environment:
  #     - MYSQL_DATABASE=shopdb
  #     - MYSQL_USER=shopdb
  #     - "MYSQL_PASSWORD={{ wordpress_shop_db_password }}"
  #     - MYSQL_RANDOM_ROOT_PASSWORD={{ wordpress_shop_root_db_password }}
  #   volumes:
  #     - "{{ appdata_path }}/wordpress-shop/db:/var/lib/mysql"
  #   restart: unless-stopped

  # - service_name: peertube
  #   active: true
  #   privileged: true
  #   image: chocobozzz/peertube:production-bullseye
  #   environment:
  #     - PEERTUBE_DB_USERNAME=postgres
  #     - PEERTUBE_DB_PASSWORD={{ peertube_db_password }}
  #     - PEERTUBE_DB_SSL=false
  #     - PEERTUBE_DB_HOSTNAME=peertube_postgres
  #     - PEERTUBE_WEBSERVER_HOSTNAME=tube.{{ local_domain }}
  #     - PEERTUBE_ADMIN_EMAIL={{ admin_email }}
  #     - PEERTUBE_SECRET={{ peertube_secret }}
  #     - PEERTUBE_REDIS_HOSTNAME=peertube_redis
  #     - PT_INITIAL_ROOT_PASSWORD={{ peertube_admin_password }}
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.peertube.rule=Host(`tube.{{ local_domain }}`)
  #     - traefik.http.services.peertube.loadbalancer.server.port=9000
  #   volumes:
  #     # - "{{ appdata_path }}/peertube/assets:/app/client/dist"
  #     - "{{ appdata_path }}/peertube/data:/data"
  #     - "{{ appdata_path }}/peertube/config:/config"
  #   devices:  
  #     - /dev/dri
  #   restart: "unless-stopped"
  #   include_global_env_vars: true
  #   depends_on:
  #     - peertube_postgres
  #     - peertube_redis
    
  # - service_name: peertube_postgres
  #   active: true
  #   image: postgres:13-alpine
  #   environment:
  #     - POSTGRES_DB=peertube
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD={{ peertube_db_password }}
  #   volumes:
  #     - "{{ appdata_path }}/peertube/db:/var/lib/postgresql/data"
  #   restart: "unless-stopped"

  # - service_name: peertube_redis
  #   active: true
  #   image: redis:6-alpine
  #   volumes:
  #     - "{{ appdata_path }}/peertube/redis:/data"
  #   restart: "unless-stopped"

  - service_name: ytdl_material
    active: true
    image: tzahi12345/youtubedl-material:nightly-2024-10-01
    environment:
      - ytdl_mongodb_connection_string=mongodb://ytdl_mongodb:27017
      - ytdl_use_local_db=false
      - write_ytdl_config=true
    restart: "unless-stopped"
    volumes:
      - "{{ appdata_path }}/ytdl/appdata:/app/appdata"
      - "{{ appdata_path }}/ytdl/audio:/app/audio"
      - "{{ media_path }}videos/videos:/app/video"
      - "{{ media_path }}videos/subscriptions:/app/subscriptions"
      - "{{ appdata_path }}/ytdl/users:/app/users"
    labels:
      - traefik.enable=true
      - traefik.http.routers.ytdl.rule=Host(`tube-dl.{{ local_domain }}`)
      - traefik.http.services.ytdl.loadbalancer.server.port=17442
    depends_on:
      - ytdl_mongodb
    include_global_env_vars: true

  - service_name: ytdl_mongodb
    active: true
    image: mongo:4
    logging:
      driver: "none"
    restart: "unless-stopped"
    volumes:
      - "{{ appdata_path }}/ytdl/db:/data/db"

  - service_name: handbrake
    active: true
    privileged: true
    image: jlesage/handbrake:v24.09.1
    labels:
      - traefik.enable=true
      - traefik.http.routers.handbrake.rule=Host(`handbrake.{{ local_domain }}`)
      - traefik.http.services.handbrake.loadbalancer.server.port=5800
    volumes:
      - "{{ appdata_path }}/handbrake/config:/config"
      - "{{ media_path }}movies:/storage/movies"
      - "{{ media_path }}videos:/storage/videos"
      - "{{ media_path }}tvshows:/storage/tvshows"
    devices:  
      - /dev/dri:/dev/dri
    restart: "unless-stopped"
    include_global_env_vars: true

  # - service_name: fileflows
  #   active: true
  #   image: revenz/fileflows
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.fileflows.rule=Host(`fileflows.{{ local_domain }}`)
  #     - traefik.http.services.fileflows.loadbalancer.server.port=5000
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - "{{ appdata_path }}/fileflows/data:/app/Data"
  #     - "{{ appdata_path }}/fileflows/logs:/app/Logs"
  #     - "{{ appdata_path }}/fileflows/media:/media"
  #     - "{{ appdata_path }}/fileflows/temp:/temp"
  #   restart: "unless-stopped"
  #   include_global_env_vars: true
  #   environment:
  #     - TempPathHost=/temp
  #   devices:  
  #     - /dev/dri

  - service_name: archivebox
    active: true
    image: archivebox/archivebox:0.8.5rc3
    labels:
      - traefik.enable=true
      - traefik.http.routers.archivebox.rule=Host(`archivebox.{{ local_domain }}`)
      - traefik.http.services.archivebox.loadbalancer.server.port=8000
    volumes:
      - "{{ appdata_path }}/archivebox/data:/data"
    include_global_env_vars: true
    environment:
      - SAVE_ARCHIVE_DOT_ORG=FALSE
      - "CSRF_TRUSTED_ORIGINS=https://archivebox.{{ local_domain }}"
      - PUBLIC_ADD_VIEW=True
      - ADMIN_USERNAME=admin
      - "ADMIN_PASSWORD={{ init_admin_pass }}"

  - service_name: metube
    active: true
    image: ghcr.io/alexta69/metube:2024-10-04
    labels:
      - traefik.enable=true
      - traefik.http.routers.metube.rule=Host(`metube.{{ local_domain }}`)
      - traefik.http.services.metube.loadbalancer.server.port=8081
    volumes:
      - "{{ media_path }}videos/metube:/downloads"
    include_global_env_vars: true

  # - service_name: dashy
  #   active: true
  #   image: ghcr.io/lissy93/dashy:latest
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.dashy.rule=Host(`home.{{ local_domain }}`)
  #     - traefik.http.services.dashy.loadbalancer.server.port=80
  #   volumes:
  #     - "{{ appdata_path }}/dashy/conf.yml:/app/public/conf.yml"
  #     # - "{{ appdata_path }}/dashy/dist:/app/dist"
  #   restart: "unless-stopped"
  #   include_global_env_vars: true

  - service_name: joplin
    active: true
    image: joplin/server:2.14.2-beta
    labels:
      - traefik.enable=true
      - traefik.http.routers.joplin.rule=Host(`joplin.{{ local_domain }}`)
      - traefik.http.services.joplin.loadbalancer.server.port=22300
    environment:
      - APP_PORT=22300
      - APP_BASE_URL=https://joplin.{{ local_domain }}
      - DB_CLIENT=pg
      - POSTGRES_PASSWORD={{ joplin_postgres_password }}
      - POSTGRES_DATABASE=joplin
      - POSTGRES_USER=joplin
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=joplin_db
    include_global_env_vars: true
    restart: "unless-stopped"
    depends_on:
      - joplin_db

  - service_name: joplin_db
    active: true
    image: postgres:15
    environment:
      - POSTGRES_PASSWORD={{ joplin_postgres_password }}
      - POSTGRES_USER=joplin
      - POSTGRES_DB=joplin
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/joplin/db:/var/lib/postgresql/data"
    restart: "unless-stopped"

  # - service_name: syncthing
  #   active: true
  #   image: syncthing/syncthing:1.27.12
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.syncthing.rule=Host(`sync.{{ local_domain }}`)
  #     - traefik.http.services.syncthing.loadbalancer.server.port=8384
  #   network: host
  #   include_global_env_vars: true
  #   expose:
  #     - 8384
  #   ports:
  #     - 22001:22000
  #     - 21028:21027/udp
  #   volumes:
  #     - "{{ appdata_path }}/syncthing:/var/syncthing"
  #   restart: "unless-stopped"

  - service_name: calibre-web
    active: true
    image: lscr.io/linuxserver/calibre-web:0.6.23
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.calibre-web.rule=Host(`calibre-web.{{ local_domain }}`)"
      - traefik.http.services.calibre-web.loadbalancer.server.port=8083
    environment:
      - DOCKER_MODS=ghcr.io/linuxserver/mods:universal-calibre
      # - OAUTHLIB_RELAX_TOKEN_SCOPE=1
    include_global_env_vars: true
    volumes:
      - "{{ appdata_path }}/calibre/data:/config"
      - "{{ appdata_path }}/calibre/db:/books"
    restart: "unless-stopped"

  - service_name: calibre
    active: true
    image: lscr.io/linuxserver/calibre:7.19.0
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.calibre.rule=Host(`calibre.{{ local_domain }}`)"
      - "traefik.http.routers.calibre.service=calibre"
      - "traefik.http.services.calibre.loadbalancer.server.port=8080"
      - "traefik.http.routers.calibrewebserver.rule=Host(`books.{{ local_domain }}`)"
      - "traefik.http.routers.calibrewebserver.service=calibrewebserver"
      - "traefik.http.services.calibrewebserver.loadbalancer.server.port=8081"
    environment:
      - "PASSWORD={{ init_admin_pass }}"
    include_global_env_vars: true
    expose:
      - 8080
      - 8081
    volumes:
      - "{{ media_path }}books:/books"
      - "{{ appdata_path }}/calibre/db:/config"
    restart: "unless-stopped"

  - service_name: kuma
    active: true
    image: louislam/uptime-kuma:1.23.15-alpine
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kuma.rule=Host(`status.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/kuma/data:/app/data"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    include_global_env_vars: true
    restart: "unless-stopped"

  - service_name: heimdall
    active: true
    image: lscr.io/linuxserver/heimdall:2.6.1
    volumes:
      - "{{ appdata_path }}/heimdall/config:/config"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.heimdall.rule=Host(`home.{{ local_domain }}`)"
    include_global_env_vars: true
    restart: unless-stopped
    
    